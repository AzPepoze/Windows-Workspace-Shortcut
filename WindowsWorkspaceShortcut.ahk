/*
------------------------------------------------------
Script Initialization
-------------------------------------------------------
*/

; --- Configuration ---
VDA_PATH := A_ScriptDir . "\VirtualDesktopAccessor.dll"

/*
------------------------------------------------------
Load DLL & Get Functions
-------------------------------------------------------
*/
hVirtualDesktopAccessor := DllCall("LoadLibrary", "Str", VDA_PATH, "Ptr")
if (!hVirtualDesktopAccessor)
{
    MsgBox, 0x10, VirtualDesktopAccessor Error, Could not load VirtualDesktopAccessor.dll.`n`nPath Tried: %VDA_PATH%
    ExitApp
}

GoToDesktopNumberProc         := DllCall("GetProcAddress", "Ptr", hVirtualDesktopAccessor, "AStr", "GoToDesktopNumber", "Ptr")
GetCurrentDesktopNumberProc   := DllCall("GetProcAddress", "Ptr", hVirtualDesktopAccessor, "AStr", "GetCurrentDesktopNumber", "Ptr")
GetDesktopCountProc           := DllCall("GetProcAddress", "Ptr", hVirtualDesktopAccessor, "AStr", "GetDesktopCount", "Ptr")
CreateDesktopProc             := DllCall("GetProcAddress", "Ptr", hVirtualDesktopAccessor, "AStr", "CreateDesktop", "Ptr")
MoveWindowToDesktopNumberProc := DllCall("GetProcAddress", "Ptr", hVirtualDesktopAccessor, "AStr", "MoveWindowToDesktopNumber", "Ptr")

if (!GoToDesktopNumberProc || !GetCurrentDesktopNumberProc || !GetDesktopCountProc || !CreateDesktopProc || !MoveWindowToDesktopNumberProc)
{
    MsgBox, 0x10, VirtualDesktopAccessor Error, Could not get function addresses from the DLL.
    DllCall("FreeLibrary", "Ptr", hVirtualDesktopAccessor)
    ExitApp
}

/*
-------------------------------------------------------
Dynamic Hotkey Assignment (Loop)
-------------------------------------------------------
*/
Loop, 9 ; Loop for Desktop 1 through 9
{
    CurrentIndex := A_Index

    ; --- Read and Assign Switch Hotkey ---
    IniReadKey := "SwitchDesktop" . CurrentIndex
    IniRead, HotkeyValue, config.ini, Hotkeys, %IniReadKey%
    if (HotkeyValue != "" && HotkeyValue != "ERROR") ; Check if key was read successfully
    {
        LabelName := "SwitchToDesktop_" . CurrentIndex . "_Label"
        Hotkey, %HotkeyValue%, %LabelName%
    } else {
        MsgBox, 0x30, Config Warning, Could not read hotkey for %IniReadKey% from config.ini
    }


    ; --- Read and Assign Move Window Hotkey ---
    IniReadKey := "MoveWindowDesktop" . CurrentIndex
    IniRead, HotkeyValue, config.ini, Hotkeys, %IniReadKey%
    if (HotkeyValue != "" && HotkeyValue != "ERROR") ; Check if key was read successfully
    {
        LabelName := "MoveWindow_" . CurrentIndex . "_Label"
        Hotkey, %HotkeyValue%, %LabelName%
    } else {
        MsgBox, 0x30, Config Warning, Could not read hotkey for %IniReadKey% from config.ini
    }
}

Return ; End of auto-execute section

/*
-------------------------------------------------------
Hotkey Labels (Generated by Loop Assignment)
-------------------------------------------------------
*/

; --- Labels for Switching Desktops ---
SwitchToDesktop_1_Label:
    SwitchToDesktop(1)
Return
SwitchToDesktop_2_Label:
    SwitchToDesktop(2)
Return
SwitchToDesktop_3_Label:
    SwitchToDesktop(3)
Return
SwitchToDesktop_4_Label:
    SwitchToDesktop(4)
Return
SwitchToDesktop_5_Label:
    SwitchToDesktop(5)
Return
SwitchToDesktop_6_Label:
    SwitchToDesktop(6)
Return
SwitchToDesktop_7_Label:
    SwitchToDesktop(7)
Return
SwitchToDesktop_8_Label:
    SwitchToDesktop(8)
Return
SwitchToDesktop_9_Label:
    SwitchToDesktop(9)
Return

; --- Labels for Moving Window and Following ---
MoveWindow_1_Label:
    MoveActiveWindowToDesktopAndFollow(1)
Return
MoveWindow_2_Label:
    MoveActiveWindowToDesktopAndFollow(2)
Return
MoveWindow_3_Label:
    MoveActiveWindowToDesktopAndFollow(3)
Return
MoveWindow_4_Label:
    MoveActiveWindowToDesktopAndFollow(4)
Return
MoveWindow_5_Label:
    MoveActiveWindowToDesktopAndFollow(5)
Return
MoveWindow_6_Label:
    MoveActiveWindowToDesktopAndFollow(6)
Return
MoveWindow_7_Label:
    MoveActiveWindowToDesktopAndFollow(7)
Return
MoveWindow_8_Label:
    MoveActiveWindowToDesktopAndFollow(8)
Return
MoveWindow_9_Label:
    MoveActiveWindowToDesktopAndFollow(9)
Return

/*
-------------------------------------------------------
Core Functions
-------------------------------------------------------
*/

SwitchToDesktop(TargetDesktopNumber)
{
    global GoToDesktopNumberProc, GetDesktopCountProc, CreateDesktopProc

    TargetDesktopIndex := TargetDesktopNumber - 1
    if (TargetDesktopIndex < 0)
        return

    EnsureDesktopExists(TargetDesktopIndex)

    DllCall(GoToDesktopNumberProc, "Int", TargetDesktopIndex, "Int")
    return
}

MoveActiveWindowToDesktopAndFollow(TargetDesktopNumber)
{
    global MoveWindowToDesktopNumberProc, GoToDesktopNumberProc, GetDesktopCountProc, CreateDesktopProc

    WinGet, activeHwnd, ID, A
    if (!activeHwnd)
        return

    TargetDesktopIndex := TargetDesktopNumber - 1
    if (TargetDesktopIndex < 0)
        return

    EnsureDesktopExists(TargetDesktopIndex)

    DllCall(MoveWindowToDesktopNumberProc, "Ptr", activeHwnd, "Int", TargetDesktopIndex, "Int")

    DllCall(GoToDesktopNumberProc, "Int", TargetDesktopIndex, "Int")
    return
}

EnsureDesktopExists(TargetDesktopIndex)
{
    global GetDesktopCountProc, CreateDesktopProc

    DesktopCount := DllCall(GetDesktopCountProc, "Int")

    if (TargetDesktopIndex >= DesktopCount)
    {
        NumDesktopsToCreate := TargetDesktopIndex - DesktopCount + 1

        Loop, % NumDesktopsToCreate
        {
            DllCall(CreateDesktopProc, "Int")
            Sleep, 50
        }
        Sleep, 100
    }
}

/*
-------------------------------------------------------
Script Exit Handling
-------------------------------------------------------
*/

OnExit("Cleanup")

Cleanup(ExitReason, ExitCode)
{
    global hVirtualDesktopAccessor
    if (hVirtualDesktopAccessor)
    {
        DllCall("FreeLibrary", "Ptr", hVirtualDesktopAccessor)
    }
}